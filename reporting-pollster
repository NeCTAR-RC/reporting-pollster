#!/usr/bin/env python
#
# Database connection support
#

import os
import sys
import signal
from reporting_pollster.common.config import Config
from reporting_pollster.common.DB import DB
from reporting_pollster.entities.entities import Entity
from novaclient.exceptions import ClientException
from mysql.connector.errors import OperationalError
import time
import logging
import argparse

tables = [
    'aggregate',
    'hypervisor',
    'project',
    'user',
    'role',
    'flavour',
    'instance',
    'volume',
    'image',
    'allocation'
]

#
# So how do we do this . . .
#
# Firstly, we do the basic updates by simply pulling in data and inserting it
# into the local database. This requires a split between pulling the data out
# of the database and putting into the local database - hence the doubling up
# of the queryies.
#
# In addition to that we need to collect data for a number of other things,
# including swift and more complicated procedural database transactions. But
# for now we just reimplement what we've got.
#
# Since we'll be operating on a dedicated local database for updates we can
# treat a lot of this stuff more brutally than we would if we were trying to
# share space with other databases. For a lot of this stuff the fact we'll be
# pulling data from a remote host means the local DB won't be the bottleneck,
# too.
#
#


def parse_args():

    parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS)
    parser.add_argument('-c', '--config-file', action='store',
                        required=False, help='specify config file')
    parser.add_argument('--logfile', action='store', required=False,
                        help='specify logfile',
                        default='/var/log/reporting-pollster.log')
    parser.add_argument('--loglevel', action='store', required=False,
                        help='specify log level', default='warning')
    parser.add_argument('--force-update', action='store_true', required=False,
                        help="ignore last update time and force a full update")
    parser.add_argument('--last-updated', action='store',
                        required=False, help=(
                            "Specify a last updated date for this run. "
                            "Should be in the format 'YYYYMMDD'"
                            ))
    parser.add_argument('--last-day', action='store_true', required=False,
                        help="update the last day's worth of data")
    parser.add_argument('--last-week', action='store_true', required=False,
                        help="update the last week's worth of data")
    parser.add_argument('--last-month', action='store_true', required=False,
                        help="update the last month's worth of data")
    parser.add_argument('-f', '--full-run', action='store_true',
                        required=False, default=False,
                        help="execute a full query/update run")
    parser.add_argument('--debug', action='count', help="increase debug level")
    parser.add_argument('--quiet', action='count', help="decrease debug level")
    parser.add_argument('--poll', action='store_true', required=False,
                        help="Run in continuous polling mode")
    parser.add_argument('--poll-period', action='store', required=False,
                        default=600, type=int,
                        help="Number of seconds between each polling run")
    parser.add_argument('--pidfile', action='store', required=False,
                        help="File to store PID info in")
    args = parser.parse_args()
    return args


class Handler(object):

    pidfile = None

    def __init__(self):
        pass

    @classmethod
    def create_pidfile(cls, pidfile="/var/run/reporting-pollster.pid"):
        cls.pidfile = pidfile
        if os.access(pidfile, os.F_OK):
            logging.critical("PID file %s exists", pidfile)
            sys.exit(1)
        with open(pidfile, 'w') as pf:
            pf.write("%d" % (os.getpid()))

    def term_handler(self, sig, frame):
        if self.pidfile:
            os.remove(self.pidfile)
        else:
            logging.info("Could not delete pidfile")
        sys.exit(0)

    @classmethod
    def cleanup_pidfile(cls, pidfile="/var/run/reporting-pollster.pid"):
        if cls.pidfile:
            os.remove(cls.pidfile)
        elif os.access(pidfile, os.F_OK):
            # we don't want to delete someone else's pidfile
            with open(pidfile, 'r') as pf:
                pid = int(pf.read())
                if os.getpid() == pid:
                    os.remove(pidfile)


def polling_loop(args):
    while True:
        logging.info("Starting polling loop at %s",
                     time.strftime("%Y-%m-%d %X %Z",
                                   time.localtime()))
        start = time.time()
        try:
            for table in tables:
                entity = Entity.from_table_name(table, args)
                entity.process()
        # in this context a nova ClientException is almost certainly a
        # transient error, so handle this explicitly
        except ClientException as e:
            logging.warning("Nova client exception received: %s",
                            repr(e))

        # capture database connectivity errors.
        #
        # we simply toss the existing connection objects rather than try
        # to reconnect - it's much simpler
        except OperationalError as e:
            logging.warning("Lost Database Connection: %s", repr(e))
            DB.invalidate()

        # capturing all other exceptions makes me uncomfortable, but it's
        # (arguably) better than simply falling over.
        #
        # The exceptions are logged, and in most cases will represent a
        # programming error and hence are logged as errors (not critical,
        # since we can continue despite the error (we hope)).
        except Exception as e:
            logging.error("Unknown exception received: %s", repr(e))
        end = time.time()
        logging.info("Finished polling loop at %s",
                     time.strftime("%Y-%m-%d %X %Z",
                                   time.localtime()))
        if 'poll' not in args or not args.poll:
            break
        remaining = (start + args.poll_period) - end
        if remaining > 0:
            time.sleep(remaining)


def main():
    args = parse_args()

    loglevel = getattr(logging, args.loglevel.upper())
    log_config = {
        'format': "%(asctime)s %(levelname)s: %(message)s",
        'datefmt': '%Y-%m-%d %X',
        'filename': args.logfile,
        'level': loglevel,
    }
    # send output to stdout rather than the logfile
    if 'debug' in args:
        del log_config['filename']
        log_config['level'] = logging.DEBUG

    # force the log level to something quiet
    if 'quiet' in args:
        log_config['level'] = logging.WARNING

    logging.basicConfig(**log_config)
    if 'config_file' in args:
        logging.info("Loading config from %s", args.config_file)
        Config.reload_config(args.config_file)

    # only do this if we're told to
    if 'pidfile' in args:
        logging.debug("Setting signal handlers")
        handler = Handler()
        signal.signal(signal.SIGINT, handler.term_handler)
        signal.signal(signal.SIGTERM, handler.term_handler)
        logging.debug("Creating pidfile")
        handler.create_pidfile(args.pidfile)

    polling_loop(args)

    logging.info("Finished polling - exiting")

if __name__ == '__main__':
    main()
    # in case we end up here
    Handler.cleanup_pidfile()
